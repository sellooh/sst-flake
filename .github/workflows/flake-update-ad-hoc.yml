name: (ad-hoc) Check for New Releases

on: workflow_dispatch

jobs:
  check-release:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Check for new release
        id: check_release
        run: |
          # Use jq and curl to check for new releases
          LATEST_RELEASE=$(curl -s https://api.github.com/repos/sst/ion/releases/latest | jq -r ".tag_name")
          echo "Latest release is $LATEST_RELEASE"
          # Compare with previously stored release
          PREVIOUS_RELEASE=$(cat .last_release || echo "")
          if [[ "$LATEST_RELEASE" != "$PREVIOUS_RELEASE" ]]; then
            echo "New release detected: $LATEST_RELEASE"
            echo "::set-output name=new_release::true"
            echo "::set-output name=latest_release::$LATEST_RELEASE"
            echo $LATEST_RELEASE > .last_release
          else
            echo "No new release detected."
            echo "::set-output name=new_release::false"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        if: steps.check_release.outputs.new_release == 'true'
        uses: cachix/install-nix-action@v25
        with:
            github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Nix Flake and Commit New Release Info
        if: steps.check_release.outputs.new_release == 'true'
        run: |
          # Update Nix flake
          nix flake update

          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git commit -am "Update last_release to ${{ steps.check_release.outputs.latest_release }}"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
